{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23040\viewh15600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 // createAuthChallenge.js\
// Converts the TypeScript createAuthChallenge handler to plain JavaScript.\
\
Import crypto from \'91crypto'; // kept in case you want to HMAC/ hash OTP later\
\
export const handler = async (event) => \{\
  // event.request contains userAttributes, clientMetadata, session, etc.\
  // We only act when this is a new CUSTOM_CHALLENGE\
  if (event.request.session && event.request.session.length === 0) \{\
    // first challenge (you can add logging or behaviour here)\
  \}\
\
  // Only create when challengeName === 'CUSTOM_CHALLENGE' and no existing challenge\
  if (event.request.challengeName !== 'CUSTOM_CHALLENGE' && event.request.session && event.request.session.length) \{\
    // do nothing\
  \}\
\
  // Generate a 6-digit OTP\
  const otp = (Math.floor(100000 + Math.random() * 900000)).toString();\
\
  // TODO (production): store a hashed OTP and/or use HMAC in challengeMetadata instead of plaintext.\
  event.response = event.response || \{\};\
  event.response.publicChallengeParameters = \{ phone_number: event.request.userAttributes && event.request.userAttributes.phone_number \};\
  // for demonstration we keep OTP in privateChallengeParameters (Cognito stores this in the session)\
  event.response.privateChallengeParameters = \{ otp \};\
  event.response.challengeMetadata = `OTP:$\{otp\}`; // Cognito will include this in the session\
\
  // Option: send SMS here using SNS (if you prefer to send from Lambda)\
  /*\
  const AWS = require('aws-sdk');\
  const sns = new AWS.SNS();\
  await sns.publish(\{\
    Message: `Your OTP is $\{otp\}`,\
    PhoneNumber: event.request.userAttributes.phone_number\
  \}).promise();\
  */\
  return event;\
\};\
}