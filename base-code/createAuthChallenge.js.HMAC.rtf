{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23040\viewh15600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 // createAuthChallenge.js\
const crypto = require('crypto');\
\
// A secret key only your Lambda knows (NOT shared with Cognito or client).\
// Ideally store this in AWS Secrets Manager or SSM Parameter Store.\
const HMAC_SECRET = process.env.HMAC_SECRET || "super-secret-key";\
\
exports.handler = async (event) => \{\
  // Generate a 6-digit OTP\
  const otp = (Math.floor(100000 + Math.random() * 900000)).toString();\
\
  // Hash the OTP with HMAC for storage\
  const hmac = crypto\
    .createHmac('sha256', HMAC_SECRET)\
    .update(otp)\
    .digest('hex');\
\
  event.response = event.response || \{\};\
  event.response.publicChallengeParameters = \{\
    phone_number: event.request.userAttributes.phone_number\
  \};\
\
  // Store OTP only in private params (not exposed to client)\
  event.response.privateChallengeParameters = \{ otp \};\
\
  // Store only HMAC in metadata (safer than storing OTP directly)\
  event.response.challengeMetadata = `HMAC:$\{hmac\}`;\
\
  // Optionally send OTP via SMS\
  /*\
  const AWS = require('aws-sdk');\
  const sns = new AWS.SNS();\
  await sns.publish(\{\
    Message: `Your OTP is $\{otp\}`,\
    PhoneNumber: event.request.userAttributes.phone_number\
  \}).promise();\
  */\
\
  return event;\
\};\
}